{"version":3,"sources":["../../../wiquid/views/js/pciCreator/ims/Broncopci/bronco/creator/tpl/propertiesForm!tpl","../../../wiquid/views/js/pciCreator/ims/Broncopci/bronco/creator/widget/states/Question.js","../../../wiquid/views/js/pciCreator/ims/Broncopci/bronco/creator/widget/states/states.js","../../../wiquid/views/js/pciCreator/ims/Broncopci/bronco/creator/widget/Widget.js","../../../wiquid/views/js/pciCreator/ims/Broncopci/bronco/creator/tpl/markup!tpl","../../../wiquid/views/js/pciCreator/ims/Broncopci/imsPciCreator.js"],"names":["define","hb","template","Handlebars","depth0","helpers","partials","data","this","compilerInfo","merge","stack1","helper","options","buffer","helperMissing","escapeExpression","__","hash","call","identifier","serial","stateFactory","Question","formElement","formTpl","_","broncoInteractionStateQuestion","extend","prototype","initForm","_widget","widget","$form","interaction","element","response","getResponseDeclaration","html","attr","initWidget","setChangeCallbacks","i","value","id","factory","states","createBundle","arguments","Widget","broncoScaleInteractionWidget","clone","initCreator","registerStates","setTemplate","prompt","markupTpl","getTypeIdentifier","getWidget","getDefaultProperties","pci","level","label-min","label-max","afterCreate","getMarkupTemplate","getMarkupData","defaultData","IMSPCI"],"mappings":"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","file":"imsPciCreator.min.js","sourcesContent":["\ndefine('tpl!broncoPortableInteraction/bronco/creator/tpl/propertiesForm', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"panel\\\">\\n  <p><b>PCI conçue par la DEPP</b></p>\\n  <p>Format IMS - 2023 </p>\\n  <p>Ministère de l'éducation nationale</p>\\n  <p>France</p>\\n  <p>Version : 1.0.1</p>\\n  <p>Réalisation <a href='http://www.wiquid.fr' target=\\\"_blank\\\">Wiquid</a></p>\\n\\n</div>\\n\\n<div class=\\\"panel\\\">\\n    <label for=\\\"\\\" class=\\\"has-icon\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Response identifier\", options) : helperMissing.call(depth0, \"__\", \"Response identifier\", options)))\n    + \"</label>\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content:first\\\" data-tooltip-theme=\\\"info\\\"></span>\\n    <div class=\\\"tooltip-content\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options)))\n    + \"</div>\\n\\n    <input type=\\\"text\\\" \\n           name=\\\"identifier\\\" \\n           value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" \\n           placeholder=\\\"e.g. RESPONSE\\\" \\n           data-validate=\\\"$notEmpty; $qtiIdentifier; $availableIdentifier(serial=\";\n  if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\">\\n</div>\";\n  return buffer;\n  });\n});\n\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n */\ndefine('broncoPortableInteraction/bronco/creator/widget/states/Question',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Question',\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\n    'tpl!broncoPortableInteraction/bronco/creator/tpl/propertiesForm',\n    'lodash',\n\n], function (stateFactory, Question, formElement,  formTpl, _) {\n    'use strict';\n\n    var broncoInteractionStateQuestion = stateFactory.extend(Question, function() {}, function() {});\n\n    broncoInteractionStateQuestion.prototype.initForm = function() {\n\n        var _widget = this.widget,\n            $form = _widget.$form,\n            interaction = _widget.element,\n            response = interaction.getResponseDeclaration();\n\n        //render the form using the form template\n        $form.html(formTpl({\n            serial: response.serial,\n            identifier: interaction.attr('responseIdentifier')\n        }));\n\n        //init form javascript\n        formElement.initWidget($form);\n\n        //init data change callbacks\n        formElement.setChangeCallbacks($form, interaction, {\n            identifier: function (i, value) {\n                response.id(value);\n                interaction.attr('responseIdentifier', value);\n            }\n        });\n\n    };\n\n    return broncoInteractionStateQuestion;\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n */\ndefine('broncoPortableInteraction/bronco/creator/widget/states/states',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states',\n    'broncoPortableInteraction/bronco/creator/widget/states/Question',\n], function(factory, states) {\n    'use strict';\n    return factory.createBundle(states, arguments, ['answer', 'correct', 'map']);\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('broncoPortableInteraction/bronco/creator/widget/Widget',[\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget',\n    'broncoPortableInteraction/bronco/creator/widget/states/states'\n], function(Widget, states) {\n    'use strict';\n\n    var broncoScaleInteractionWidget = Widget.clone();\n\n    broncoScaleInteractionWidget.initCreator = function() {\n\n        this.registerStates(states);\n\n        Widget.initCreator.call(this);\n        //for existing bronco scale PCI, ensure that the rp template is always NONE\n        this.element.getResponseDeclaration().setTemplate('NONE');\n    };\n\n    return broncoScaleInteractionWidget;\n});\n","\ndefine('tpl!broncoPortableInteraction/bronco/creator/tpl/markup', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"bronco\\\">\\n    <div class=\\\"prompt\\\">\";\n  if (helper = helpers.prompt) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.prompt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n    <div class=\\\"bonnesante\\\">Chez un individu en bonne santé</div>  \\n    <div class=\\\"asthmatique\\\">Chez un individu asthmatique</div>\\n      \\n    <div class=\\\"svghome\\\">\\n        <div class=\\\"alveole\\\">Paroi de l'alvéole pulmonaire</div>\\n        <div class=\\\"paroi\\\">Paroi de la bronchiole </div>\\n    </div>\\n    \\n\\n  <div class=\\\"polludiv\\\">\\n    <span  class=\\\"leg moins\\\">- Moins de pollution</span>\\n    <span  class=\\\"leg plus\\\">+ Plus de pollution</span>\\n    <div class=\\\"consigne\\\">Avec la souris, déplacer le curseur afin de faire varier le niveau de pollution de l'air.</div>\\n  </div>\\n\\n\\n\\n<div id=\\\"broncoanswer\\\" class=\\\"broncoanswer\\\"></div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('broncoPortableInteraction/imsPciCreator',[\n    'lodash',\n    'broncoPortableInteraction/bronco/creator/widget/Widget',\n    'tpl!broncoPortableInteraction/bronco/creator/tpl/markup'\n], function(_, Widget, markupTpl) {\n    'use strict';\n\n    var _typeIdentifier = 'broncoPortableInteraction';\n\n    return {\n        /**\n         * (required) Get the typeIdentifier of the custom interaction\n         * \n         * @returns {String}\n         */\n        getTypeIdentifier: function() {\n            return _typeIdentifier;\n        },\n        /**\n         * (required) Get the widget prototype\n         * Used in the renderer\n         * \n         * @returns {Object} Widget\n         */\n        getWidget: function() {\n            return Widget;\n        },\n        /**\n         * (optional) Get the default properties values of the pci.\n         * Used on new pci instance creation\n         * \n         * @returns {Object}\n         */\n        getDefaultProperties: function(pci) {\n            return {\n                level: 5,\n                'label-min': 'min',\n                'label-max': 'max'\n            };\n        },\n        /**\n         * (optional) Callback to execute on the \n         * Used on new pci instance creation\n         * \n         * @returns {Object}\n         */\n        afterCreate: function(pci) {\n            //always set the NONE response processing mode to bronco scale\n            pci.getResponseDeclaration().setTemplate('NONE');\n        },\n        /**\n         * (required) Gives the qti pci xml template \n         * \n         * @returns {function} handlebar template\n         */\n        getMarkupTemplate: function() {\n            return markupTpl;\n        },\n        /**\n         * (optional) Allows passing additional data to xml template\n         * \n         * @returns {function} handlebar template\n         */\n        getMarkupData: function(pci, defaultData) {\n            defaultData.prompt = pci.data('prompt');\n            return defaultData;\n        }\n    };\n});\n"]}