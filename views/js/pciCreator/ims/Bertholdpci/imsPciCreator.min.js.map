{"version":3,"sources":["../../../wiquid/views/js/pciCreator/ims/Bertholdpci/interaction/creator/tpl/propertiesForm!tpl","../../../wiquid/views/js/pciCreator/ims/Bertholdpci/interaction/creator/widget/states/Question.js","../../../wiquid/views/js/pciCreator/ims/Bertholdpci/interaction/creator/widget/states/Answer.js","../../../wiquid/views/js/pciCreator/ims/Bertholdpci/interaction/creator/widget/states/states.js","../../../wiquid/views/js/pciCreator/ims/Bertholdpci/interaction/creator/widget/Widget.js","../../../wiquid/views/js/pciCreator/ims/Bertholdpci/interaction/creator/tpl/markup!tpl","../../../wiquid/views/js/pciCreator/ims/Bertholdpci/imsPciCreator.js"],"names":["define","hb","template","Handlebars","depth0","helpers","partials","data","this","compilerInfo","merge","stack1","helper","options","buffer","helperMissing","escapeExpression","__","hash","call","identifier","serial","stateFactory","Question","formElement","simpleEditor","formTpl","_","BertholdInteractionStateQuestion","extend","$container","widget","interaction","element","create","text","prop","destroy","prototype","initForm","$","parent","find","hide","_widget","$form","response","getResponseDeclaration","html","initWidget","Answer","answerStateHelper","InteractionStateAnswer","$original","initResponseForm","rpTemplates","factory","states","createBundle","arguments","Widget","BertholdScaleInteractionWidget","clone","initCreator","registerStates","setTemplate","prompt","markupTpl","getTypeIdentifier","getWidget","getDefaultProperties","pci","level","label-min","label-max","afterCreate","getMarkupTemplate","getMarkupData","defaultData","IMSPCI"],"mappings":"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","file":"imsPciCreator.min.js","sourcesContent":["\ndefine('tpl!BertholdPCI/interaction/creator/tpl/propertiesForm', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"panel\\\">\\n    <p><b>PCI conçue par la DEPP</b></p>\\n    <p>Format IMS - 2023</p>\\n    <p>Ministère de l'éducation nationale</p>\\n    <p>France</p>\\n    <p>Réalisation <a href='http://www.wiquid.fr' target=\\\"_blank\\\">Wiquid</a></p>\\n</div>\\n\\n<div class=\\\"panel\\\">\\n    <label for=\\\"\\\" class=\\\"has-icon\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Response identifier\", options) : helperMissing.call(depth0, \"__\", \"Response identifier\", options)))\n    + \"</label>\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content:first\\\" data-tooltip-theme=\\\"info\\\"></span>\\n    <div class=\\\"tooltip-content\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the choice. This identifier must not be used by any other\\n        response or item variable. An identifier is a string of characters that must start with a Letter or an\\n        underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits,\\n        CombiningChars and Extenders.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the choice. This identifier must not be used by any other\\n        response or item variable. An identifier is a string of characters that must start with a Letter or an\\n        underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits,\\n        CombiningChars and Extenders.\", options)))\n    + \"</div>\\n\\n    <input type=\\\"text\\\" name=\\\"identifier\\\" value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" placeholder=\\\"e.g. RESPONSE\\\"\\n        data-validate=\\\"$notEmpty; $qtiIdentifier; $availableIdentifier(serial=\";\n  if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\">\\n</div>\";\n  return buffer;\n  });\n});\n\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('BertholdPCI/interaction/creator/widget/states/Question',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Question',\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\n    'taoQtiItem/qtiCreator/editor/simpleContentEditableElement',\n    'tpl!BertholdPCI/interaction/creator/tpl/propertiesForm',\n    'lodash',\n    'jquery'\n], function(stateFactory, Question, formElement, simpleEditor, formTpl, _) {\n    'use strict';\n\n    var BertholdInteractionStateQuestion = stateFactory.extend(Question, function() {\n\n        var $container = this.widget.$container,\n            interaction = this.widget.element;\n\n        simpleEditor.create($container, '.Berthold-label-min', function(text) {\n            interaction.prop('label-min', text);\n        });\n\n        simpleEditor.create($container, '.Berthold-label-max', function(text) {\n            interaction.prop('label-max', text);\n        });\n\n    }, function() {\n\n        simpleEditor.destroy(this.widget.$container);\n    });\n\n    BertholdInteractionStateQuestion.prototype.initForm = function() {\n\n        $(\".berthold\").parent().parent().find('.state-switcher').hide();\n\n        var _widget = this.widget,\n            $form = _widget.$form,\n            interaction = _widget.element,\n            response = interaction.getResponseDeclaration();\n\n\n        //render the form using the form template\n        $form.html(formTpl({\n            serial: response.serial\n        }));\n\n        //init form javascript\n        formElement.initWidget($form);\n\n        \n    }\n\n    return BertholdInteractionStateQuestion;\n});\n","define('BertholdPCI/interaction/creator/widget/states/Answer',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Answer',\n    'taoQtiItem/qtiCreator/widgets/interactions/helpers/answerState',\n    'taoQtiItem/qtiCreator/widgets/helpers/content'\n], function(stateFactory, Answer, answerStateHelper) {\n    'use strict';\n\n    var InteractionStateAnswer = stateFactory.extend(Answer, function initAnswerState() {\n        this.widget.$original.find('.Berthold input').prop('disabled', true);\n    }, function exitAnswerState() {\n        this.widget.$original.find('.Berthold input').prop('disabled', false);\n    });\n\n    InteractionStateAnswer.prototype.initResponseForm = function initResponseForm() {\n\n        answerStateHelper.initResponseForm(this.widget, { rpTemplates: ['CUSTOM', 'NONE'] });\n    };\n\n    return InteractionStateAnswer;\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('BertholdPCI/interaction/creator/widget/states/states',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states',\n    'BertholdPCI/interaction/creator/widget/states/Question',\n    'BertholdPCI/interaction/creator/widget/states/Answer'\n], function(factory, states) {\n    'use strict';\n    return factory.createBundle(states, arguments, ['correct', 'map']);\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('BertholdPCI/interaction/creator/widget/Widget',[\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget',\n    'BertholdPCI/interaction/creator/widget/states/states'\n], function(Widget, states) {\n    'use strict';\n\n    var BertholdScaleInteractionWidget = Widget.clone();\n\n    BertholdScaleInteractionWidget.initCreator = function() {\n\n        this.registerStates(states);\n\n        Widget.initCreator.call(this);\n\n        //for existing Berthold scale PCI, ensure that the rp template is always NONE\n        this.element.getResponseDeclaration().setTemplate('NONE');\n    };\n\n    return BertholdScaleInteractionWidget;\n});\n","\ndefine('tpl!BertholdPCI/interaction/creator/tpl/markup', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"berthold\\\">\\n    <div class=\\\"prompt\\\">\";\n  if (helper = helpers.prompt) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.prompt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"&nbsp;</div>\\n    <div class=\\\"cadretitre\\\">\\n        <div class=\\\"titre\\\">Une expérience historique (Berthold, 1848)</div>\\n        <div class=\\\"imagetitre\\\">&nbsp;</div>\\n    </div>\\n    <div class=\\\"cartes\\\">\\n        <div class=\\\"slot place1\\\">\\n            <div class=\\\"slot1 calleur\\\">&nbsp;</div>\\n        </div>\\n        <div class=\\\"slot place2\\\">\\n            <div class=\\\"slot2 calleur\\\">&nbsp;</div>\\n        </div>\\n        <div class=\\\"slot place3\\\">\\n            <div class=\\\"slot3 calleurlast\\\">&nbsp;</div>\\n        </div>\\n    </div>\\n    <div class=\\\"clickanim1 hiddendiv\\\">0</div>\\n    <div class=\\\"clickanim2 hiddendiv\\\">0</div>\\n    <div class=\\\"clickanim3 hiddendiv\\\">0</div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('BertholdPCI/imsPciCreator',[\n    'lodash',\n    'BertholdPCI/interaction/creator/widget/Widget',\n    'tpl!BertholdPCI/interaction/creator/tpl/markup'\n], function(_, Widget, markupTpl) {\n    'use strict';\n\n    var _typeIdentifier = 'BertholdPCI';\n\n    return {\n        /**\n         * (required) Get the typeIdentifier of the custom interaction\n         * \n         * @returns {String}\n         */\n        getTypeIdentifier: function() {\n            return _typeIdentifier;\n        },\n        /**\n         * (required) Get the widget prototype\n         * Used in the renderer\n         * \n         * @returns {Object} Widget\n         */\n        getWidget: function() {\n            return Widget;\n        },\n        /**\n         * (optional) Get the default properties values of the pci.\n         * Used on new pci instance creation\n         * \n         * @returns {Object}\n         */\n        getDefaultProperties: function(pci) {\n            return {\n                level: 5,\n                'label-min': 'min',\n                'label-max': 'max'\n            };\n        },\n        /**\n         * (optional) Callback to execute on the \n         * Used on new pci instance creation\n         * \n         * @returns {Object}\n         */\n        afterCreate: function(pci) {\n            //always set the NONE response processing mode to Berthold scale\n            pci.getResponseDeclaration().setTemplate('NONE');\n        },\n        /**\n         * (required) Gives the qti pci xml template \n         * \n         * @returns {function} handlebar template\n         */\n        getMarkupTemplate: function() {\n            return markupTpl;\n        },\n        /**\n         * (optional) Allows passing additional data to xml template\n         * \n         * @returns {function} handlebar template\n         */\n        getMarkupData: function(pci, defaultData) {\n            defaultData.prompt = pci.data('prompt');\n            return defaultData;\n        }\n    };\n});\n"]}